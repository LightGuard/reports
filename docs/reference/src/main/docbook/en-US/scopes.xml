<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="scopes">
	<title>Faces Scoping Support</title>
	<para>
		JSF 2.0 introduced the concept of the @FlashScope and the @ViewScope; however, JSF 2.0 did not provide annotations for accessing the FlashScope,
		 and CDI does not support the non-standard ViewScope by default. The Seam Faces module does both. Beans stored in the FlashScope will survive
		 until the next page is rendered, and for the most part, beans stored in the ViewScope will survive as long as a user remains on the
		 same page.
	</para>
	<section id="flashscoped">
		<title>@FlashScoped</title>
		<para>
			You should think about using the Flash scope if you want to store information that will be relevant to the user even after an action
			sends them to another view. For instance, when a user submits a form, you may want to invoke JSF navigation and redirect 
			the user to another page in the site; if you needed to store a message to be displayed when the next page is rendered -but no longer- 
			you would store that message in the FlashContext. Fortunately, Seam provides FlashScoped messages by default, via the 
			<link linkend="messages">Seam Messages API</link>. 
		</para>
		<para>
			To scope a bean to the Flash, use the <literal>@javax.faces.bean.FlashScoped</literal> annotation. This means that your bean will be stored in the 
			<literal>org.jboss.seam.context.FlashContext</literal> until the next page is rendered, at which point the FlashScope will be cleared.

<programlisting>@FlashScoped
public class Bean {
	// ...
}</programlisting>

			<caution>
				<para>
					@FlashScoped beans are destroyed when the Flash is cleared. This means that the	life-span of @FlashScoped beans last only until
					the next Render Response phase is executed.
				</para>
				<para>
					If you want to use the Flash Scope with custom navigation in your application, 
					be sure to call <literal>ExternalContext.encodeRedirectURL(String url, Map&lt;String, List&lt;String&gt;&gt; queryParams)</literal>
					on any URL before using it to issue a redirect. This will ensure that the FlashContext ID is properly appended to the URL, enabling
					the FlashContext to be restored on the subsequent request. This is only necessary if issuing a Servlet Redirect.
				</para>
			</caution>
		</para>
	</section>
	<section id="viewscoped">
		<title>@ViewScoped</title>
		<para>
			To scope a bean to the View, use the <literal>@javax.faces.bean.ViewScoped</literal> annotation. This means that your bean will be stored in the 
			<literal>javax.faces.component.UIViewRoot</literal> object associated with the view in which it was accessed. Each JSF view (faces-page) will store
			its own instance of the bean, just like each HttpServletRequest has its own instance of a @RequestScoped bean.
			<programlisting>@ViewScoped
public class Bean {
	// ...
}</programlisting>
			<caution>
				<para>
					@ViewScoped beans are destroyed when the JSF UIViewRoot object is destroyed. This means that the
					life-span of @ViewScoped beans is dependent on the <literal>javax.faces.STATE_SAVING_METHOD</literal> employed by the application itself,
					but in general one can assume that the bean will live as long as the user remains on the same page.
				</para>
			</caution>
		</para>
	</section>
</chapter>